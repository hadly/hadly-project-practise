<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-4.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 包扫描 -->
    <context:component-scan base-package="com.hadly.*"/>

    <!-- properties配置文件(注意，bean id不能和别的配置文件相同，否则会覆盖) -->
    <bean id="daoTestProperties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc-test.properties</value>
            </list>
        </property>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
    </bean>

    <!-- 数据源配置 -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="connectionProperties">
            <props>
                <prop key="dbpool.class"></prop>
                <prop key="dbpool.filters"></prop>
            </props>
        </property>
    </bean>

    <!-- Spring JDBC模板类，暂时未用 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- MyBatis SqlSession工厂，用于产生SqlSession对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- MyBatis配置文件 -->
        <property name="configLocation" value="classpath:config/mybatis/mybatis-config.xml"/>
        <!-- 匹配Mapper映射文件 -->
        <property name="mapperLocations" value="classpath:config/mybatis/mapper/*Mapper.xml"/>
    </bean>

    <!--TODO 再细看下-->
    <!-- 扫描的模式，创建MapperFactoryBean，之后自动装配；但是如果使用一个以上的DataSource，自动
     装配可能失效，需要使用sqlSessionFactoryBeanName属性来设置正确的bean名称来使用-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.hadly"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 事务管理方式一：注解 -->
    <tx:annotation-driven proxy-target-class="true"/>

    <!-- 事务管理方式二：XML配置 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED" read-only="false"
                       isolation="READ_COMMITTED" rollback-for="Exception"/>
            <!--TODO update,delete可相同-->
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <!--TODO query,count,select可相同-->
        </tx:attributes>
    </tx:advice>
    <!-- 指定在什么地方执行什么方法的时候用事务，具体事务定义参考txAdvice -->
    <aop:config>
        <aop:pointcut id="transactionPointcut" expression="execution(* com.hadly.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="transactionPointcut"/>
    </aop:config>
</beans>